#cloud-config
# vim: syntax=yaml

hostname: ${node_name}
users:
  - name: ${node_ssh_user} 
    plain_text_passwd: ${node_ssh_password}
    ssh_authorized_keys:
    - ${node_ssh_key}
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users

chpasswd: 
  expire: False
ssh_pwauth: True

# growpart:
#   mode: auto
#   devices: ['/']
#   ignore_growroot_disabled: false


write_files:
  - path: /etc/sudoers.d/${ad_group}
    permissions: '0440'
    content: |
      ${ad_group} ALL=(ALL) ALL
  - path: /etc/rancher/rke2/config.yaml
    content: | 
      server: https://${init_node_ip}:9345
      write-kubeconfig-mode: "0640"
      token: ${rke2_token}
      tls-san:
        - ${url}      
  - path: /opt/rke2-install.sh
    encoding: b64
    content: ""
    owner: root:root
    permissions: '0755'

power_state:
  mode: reboot
  message: rebooting
  timeout: 10
  condition: True

runcmd:
  - "systemctl restart wicked"
  - "firewall-cmd --add-port=6443/tcp --permanent"
  - "firewall-cmd --add-port=2379-2380/tcp --permanent"
  - "firewall-cmd --add-port=10250/tcp --permanent"
  - "firewall-cmd --add-port=10251/tcp --permanent"
  - "firewall-cmd --add-port=10252/tcp --permanent"
  - "firewall-cmd --add-port=9345/tcp --permanent"
  - "firewall-cmd --add-port=8472/udp --permanent"
  - "firewall-cmd --add-port=30000-32767/tcp --permanent"
  - "firewall-cmd --reload"
  - "INSTALL_RKE2_VERSION='${rke2_version}' /opt/rke2-install.sh"
  - "systemctl enable rke2-server"
  - "echo '${ad_password}' | realm join -U '${ad_password}' '${ad_domain}'"
